# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: protos/commspb.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import protos.commspb_pb2


class CommsServiceBase(abc.ABC):

    @abc.abstractmethod
    async def JoinChannel(self, stream: 'grpclib.server.Stream[protos.commspb_pb2.Channel, protos.commspb_pb2.Message]') -> None:
        pass

    @abc.abstractmethod
    async def SendMessage(self, stream: 'grpclib.server.Stream[protos.commspb_pb2.Message, protos.commspb_pb2.MessageAck]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/commspb.CommsService/JoinChannel': grpclib.const.Handler(
                self.JoinChannel,
                grpclib.const.Cardinality.UNARY_STREAM,
                protos.commspb_pb2.Channel,
                protos.commspb_pb2.Message,
            ),
            '/commspb.CommsService/SendMessage': grpclib.const.Handler(
                self.SendMessage,
                grpclib.const.Cardinality.STREAM_UNARY,
                protos.commspb_pb2.Message,
                protos.commspb_pb2.MessageAck,
            ),
        }


class CommsServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.JoinChannel = grpclib.client.UnaryStreamMethod(
            channel,
            '/commspb.CommsService/JoinChannel',
            protos.commspb_pb2.Channel,
            protos.commspb_pb2.Message,
        )
        self.SendMessage = grpclib.client.StreamUnaryMethod(
            channel,
            '/commspb.CommsService/SendMessage',
            protos.commspb_pb2.Message,
            protos.commspb_pb2.MessageAck,
        )
